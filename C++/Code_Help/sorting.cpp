#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

void merge(int *arr, int s, int e)
{
    int mid = (s + e) / 2;
    int n1 = mid - s + 1;
    int n2 = e - mid;

    int *left = new int[n1];
    int *right = new int[n2];

    int k = s;
    for (int i = 0; i < n1; i++)
    {
        left[i] = arr[k];
        k++;
    }

    k = mid + 1;
    for (int i = 0; i < n2; i++)
    {
        right[i] = arr[k];
        k++;
    }

    int i = 0, j = 0, l = s;
    while (i < n1 && j < n2)
    {
        if (left[i] <= right[j])
        {
            arr[l++] = left[i++];
            //  arr[l++] = left[i++] => means
            // arr[l] = left[i]; l++; i++;
        }
        else
        {
            arr[l++] = right[j++];
        }
    }

    while (i < n1)
    {
        arr[l++] = left[i++];
    }
    while (j < n2)
    {
        arr[l++] = right[j++];
    }
};

int partition(int arr[], int s, int e)
{
    int pivotIndex = s, pivotElement = arr[s], count = 0;

    for (int i = s + 1; i < e; i++)
    {
        if (arr[i] <= pivotElement)
        {
            count++;
        }
    }

    int rightIndex = s + count;
    swap(arr[pivotIndex], arr[rightIndex]);
    pivotIndex = rightIndex;

    int i = s, j = e;
    while (i < pivotIndex && j > pivotIndex)
    {
        while (arr[i] <= pivotElement)
        {
            i++;
        }
        while (arr[j] > pivotElement)
        {
            j--;
        }

        if (i < pivotIndex && j > pivotIndex)
        {
            swap(arr[i], arr[j]);
        }
    }
    return pivotIndex;
};

void mergeSort(int *arr, int s, int e)
{
    if (s >= e)
        return;

    int mid = (s + e) / 2;

    mergeSort(arr, s, mid);

    mergeSort(arr, mid + 1, e);

    merge(arr, s, e);
};

void quickSort(int arr[], int s, int e)
{
    if (s >= e)
        return;

    int p = partition(arr, s, e);

    quickSort(arr, s, p - 1);
    quickSort(arr, p + 1, e);
};
int main()
{

    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------Selection Sort------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------
    // vector<int> arr{5, 4, 3, 2, 1};
    // int n = arr.size();
    // for (int i = 0; i < n - 1; i++)
    // {
    //     int min_index = i;
    //     for (int j = i + 1; j < n; j++)
    //     {
    //         if (arr[j] < arr[min_index])
    //         {
    //             min_index = j;
    //         }
    //     }
    //     swap(arr[i], arr[min_index]);
    // }

    // for (int i = 0; i < n; i++)
    // {
    //     cout << arr[i] << " ";
    // }
    // cout << endl;

    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------Bubble Sort-----------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------

    // ------------------------------------------------------------------------------------------------------------------------------
    // .................................................Method 1.................................................................................
    // -------------------------------------------------------------------------------------------------------------------------------

    // vector<int> arr{10, 1, 7, 6, 14, 9};

    // for (int i = 1; i < arr.size(); i++)
    // {
    //     for (int j = 0; j < arr.size() - 1; j++)
    //     {
    //         if (arr[j] > arr[j + 1])
    //         {
    //             swap(arr[j], arr[j + 1]);
    //         }
    //     }
    // }

    // for (int i = 0; i < arr.size(); i++)
    // {
    //     cout << arr[i] << " ";
    // }+++++

    // ------------------------------------------------------------------------------------------------------------------------------
    // .................................................Method 2.................................................................................
    // -------------------------------------------------------------------------------------------------------------------------------

    // vector<int> arr{10, 1, 7, 6, 14, 9};

    // for (int i = 1; i < arr.size(); i++)
    // {
    //     bool swapped = false;
    //     for (int j = 0; j < arr.size() - 1; j++)
    //     {
    //         if (arr[j] > arr[j + 1])
    //         {
    //             swap(arr[j], arr[j + 1]);
    //             swapped = true;
    //         }
    //     }

    //     if (!swapped)
    //     {
    //         break;
    //     }
    // }

    // for (int i = 0; i < arr.size(); i++)
    // {
    //     cout << arr[i] << " ";
    // }

    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------Insertion Sort-----------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------

    // ------------------------------------------------------------------------------------------------------------------------------
    // .................................................Method 1.................................................................................
    // -------------------------------------------------------------------------------------------------------------------------------

    // vector<int> arr{10, 1, 7, 6, 14, 9};

    // for (int i = 1; i < arr.size(); i++)
    // {
    //     int val = arr[i];
    //     int j = i - 1;
    //     for (; j >= 0; j--)
    //     {
    //         if (arr[j] > val)
    //         {
    //             arr[j + 1] = arr[j];
    //         }
    //         else
    //         {
    //             break;
    //         }
    //     }
    //     arr[j + 1] = val;
    // }

    // for (int i = 0; i < arr.size(); i++)
    // {
    //     cout << arr[i] << " ";
    // }
    // cout << endl;

    // ------------------------------------------------------------------------------------------------------------------------------
    // .................................................Method 2......................................................................
    // -------------------------------------------------------------------------------------------------------------------------------

    // vector<int> v{10, 1, 7, 6, 14, 9};

    // sort(v.begin(), v.end());
    // for (int i = 0; i < v.size(); i++)
    // {
    //     cout << v[i] << " ";
    // }
    // cout << endl;

    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------Merge Sort------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------

    // int arr[] = {4, 13, 5, 12, 2, 3, 3}, n = 7, s = 0, e = n - 1;
    // mergeSort(arr, s, e);
    // for (int i = 0; i < n; i++)
    // {
    //     cout << arr[i] << " ";
    // }
    // cout << endl;

    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // ---------------------------------------Quick Sort------------------------------------------------------------------------------------------
    // ----------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------

    // int arr[] = {8, 1, 6, 4, 20, 50}, n = 6, s = 0, e = n - 1;
    // quickSort(arr, s, e);
    // for (int i = 0; i < n; i++)
    // {
    //     cout << arr[i] << " ";
    // }
    // cout << endl;

    return 0;
}
